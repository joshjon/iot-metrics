// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: iot/v1/service.proto

package iotv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/joshjon/iot-metrics/proto/gen/iot/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DeviceServiceName is the fully-qualified name of the DeviceService service.
	DeviceServiceName = "iot.v1.DeviceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeviceServiceRecordMetricProcedure is the fully-qualified name of the DeviceService's
	// RecordMetric RPC.
	DeviceServiceRecordMetricProcedure = "/iot.v1.DeviceService/RecordMetric"
	// DeviceServiceConfigureDeviceProcedure is the fully-qualified name of the DeviceService's
	// ConfigureDevice RPC.
	DeviceServiceConfigureDeviceProcedure = "/iot.v1.DeviceService/ConfigureDevice"
	// DeviceServiceGetDeviceAlertsProcedure is the fully-qualified name of the DeviceService's
	// GetDeviceAlerts RPC.
	DeviceServiceGetDeviceAlertsProcedure = "/iot.v1.DeviceService/GetDeviceAlerts"
)

// DeviceServiceClient is a client for the iot.v1.DeviceService service.
type DeviceServiceClient interface {
	RecordMetric(context.Context, *connect.Request[v1.RecordMetricRequest]) (*connect.Response[v1.RecordMetricResponse], error)
	ConfigureDevice(context.Context, *connect.Request[v1.ConfigureDeviceRequest]) (*connect.Response[v1.ConfigureDeviceResponse], error)
	GetDeviceAlerts(context.Context, *connect.Request[v1.GetDeviceAlertsRequest]) (*connect.Response[v1.GetDeviceAlertsResponse], error)
}

// NewDeviceServiceClient constructs a client for the iot.v1.DeviceService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeviceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeviceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	deviceServiceMethods := v1.File_iot_v1_service_proto.Services().ByName("DeviceService").Methods()
	return &deviceServiceClient{
		recordMetric: connect.NewClient[v1.RecordMetricRequest, v1.RecordMetricResponse](
			httpClient,
			baseURL+DeviceServiceRecordMetricProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("RecordMetric")),
			connect.WithClientOptions(opts...),
		),
		configureDevice: connect.NewClient[v1.ConfigureDeviceRequest, v1.ConfigureDeviceResponse](
			httpClient,
			baseURL+DeviceServiceConfigureDeviceProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("ConfigureDevice")),
			connect.WithClientOptions(opts...),
		),
		getDeviceAlerts: connect.NewClient[v1.GetDeviceAlertsRequest, v1.GetDeviceAlertsResponse](
			httpClient,
			baseURL+DeviceServiceGetDeviceAlertsProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("GetDeviceAlerts")),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// deviceServiceClient implements DeviceServiceClient.
type deviceServiceClient struct {
	recordMetric    *connect.Client[v1.RecordMetricRequest, v1.RecordMetricResponse]
	configureDevice *connect.Client[v1.ConfigureDeviceRequest, v1.ConfigureDeviceResponse]
	getDeviceAlerts *connect.Client[v1.GetDeviceAlertsRequest, v1.GetDeviceAlertsResponse]
}

// RecordMetric calls iot.v1.DeviceService.RecordMetric.
func (c *deviceServiceClient) RecordMetric(ctx context.Context, req *connect.Request[v1.RecordMetricRequest]) (*connect.Response[v1.RecordMetricResponse], error) {
	return c.recordMetric.CallUnary(ctx, req)
}

// ConfigureDevice calls iot.v1.DeviceService.ConfigureDevice.
func (c *deviceServiceClient) ConfigureDevice(ctx context.Context, req *connect.Request[v1.ConfigureDeviceRequest]) (*connect.Response[v1.ConfigureDeviceResponse], error) {
	return c.configureDevice.CallUnary(ctx, req)
}

// GetDeviceAlerts calls iot.v1.DeviceService.GetDeviceAlerts.
func (c *deviceServiceClient) GetDeviceAlerts(ctx context.Context, req *connect.Request[v1.GetDeviceAlertsRequest]) (*connect.Response[v1.GetDeviceAlertsResponse], error) {
	return c.getDeviceAlerts.CallUnary(ctx, req)
}

// DeviceServiceHandler is an implementation of the iot.v1.DeviceService service.
type DeviceServiceHandler interface {
	RecordMetric(context.Context, *connect.Request[v1.RecordMetricRequest]) (*connect.Response[v1.RecordMetricResponse], error)
	ConfigureDevice(context.Context, *connect.Request[v1.ConfigureDeviceRequest]) (*connect.Response[v1.ConfigureDeviceResponse], error)
	GetDeviceAlerts(context.Context, *connect.Request[v1.GetDeviceAlertsRequest]) (*connect.Response[v1.GetDeviceAlertsResponse], error)
}

// NewDeviceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeviceServiceHandler(svc DeviceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deviceServiceMethods := v1.File_iot_v1_service_proto.Services().ByName("DeviceService").Methods()
	deviceServiceRecordMetricHandler := connect.NewUnaryHandler(
		DeviceServiceRecordMetricProcedure,
		svc.RecordMetric,
		connect.WithSchema(deviceServiceMethods.ByName("RecordMetric")),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceConfigureDeviceHandler := connect.NewUnaryHandler(
		DeviceServiceConfigureDeviceProcedure,
		svc.ConfigureDevice,
		connect.WithSchema(deviceServiceMethods.ByName("ConfigureDevice")),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceGetDeviceAlertsHandler := connect.NewUnaryHandler(
		DeviceServiceGetDeviceAlertsProcedure,
		svc.GetDeviceAlerts,
		connect.WithSchema(deviceServiceMethods.ByName("GetDeviceAlerts")),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/iot.v1.DeviceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeviceServiceRecordMetricProcedure:
			deviceServiceRecordMetricHandler.ServeHTTP(w, r)
		case DeviceServiceConfigureDeviceProcedure:
			deviceServiceConfigureDeviceHandler.ServeHTTP(w, r)
		case DeviceServiceGetDeviceAlertsProcedure:
			deviceServiceGetDeviceAlertsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeviceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeviceServiceHandler struct{}

func (UnimplementedDeviceServiceHandler) RecordMetric(context.Context, *connect.Request[v1.RecordMetricRequest]) (*connect.Response[v1.RecordMetricResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("iot.v1.DeviceService.RecordMetric is not implemented"))
}

func (UnimplementedDeviceServiceHandler) ConfigureDevice(context.Context, *connect.Request[v1.ConfigureDeviceRequest]) (*connect.Response[v1.ConfigureDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("iot.v1.DeviceService.ConfigureDevice is not implemented"))
}

func (UnimplementedDeviceServiceHandler) GetDeviceAlerts(context.Context, *connect.Request[v1.GetDeviceAlertsRequest]) (*connect.Response[v1.GetDeviceAlertsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("iot.v1.DeviceService.GetDeviceAlerts is not implemented"))
}
