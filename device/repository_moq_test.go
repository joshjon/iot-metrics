// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package device

import (
	"context"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked Repository
//		mockedRepository := &RepositoryMock{
//			GetDeviceAlertsFunc: func(ctx context.Context, deviceID string, timeframe Timeframe, pageOpts RepositoryPageOptions) (RepositoryPage[Alert], error) {
//				panic("mock out the GetDeviceAlerts method")
//			},
//			GetDeviceConfigFunc: func(ctx context.Context, deviceID string) (Config, error) {
//				panic("mock out the GetDeviceConfig method")
//			},
//			GetDeviceMetricsFunc: func(ctx context.Context, deviceID string, timeframe Timeframe, pageOpts RepositoryPageOptions) (RepositoryPage[Metric], error) {
//				panic("mock out the GetDeviceMetrics method")
//			},
//			SaveDeviceAlertFunc: func(ctx context.Context, deviceID string, alert Alert) error {
//				panic("mock out the SaveDeviceAlert method")
//			},
//			SaveDeviceMetricFunc: func(ctx context.Context, deviceID string, metric Metric) error {
//				panic("mock out the SaveDeviceMetric method")
//			},
//			UpsertDeviceConfigFunc: func(ctx context.Context, deviceID string, config Config) error {
//				panic("mock out the UpsertDeviceConfig method")
//			},
//		}
//
//		// use mockedRepository in code that requires Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// GetDeviceAlertsFunc mocks the GetDeviceAlerts method.
	GetDeviceAlertsFunc func(ctx context.Context, deviceID string, timeframe Timeframe, pageOpts RepositoryPageOptions) (RepositoryPage[Alert], error)

	// GetDeviceConfigFunc mocks the GetDeviceConfig method.
	GetDeviceConfigFunc func(ctx context.Context, deviceID string) (Config, error)

	// GetDeviceMetricsFunc mocks the GetDeviceMetrics method.
	GetDeviceMetricsFunc func(ctx context.Context, deviceID string, timeframe Timeframe, pageOpts RepositoryPageOptions) (RepositoryPage[Metric], error)

	// SaveDeviceAlertFunc mocks the SaveDeviceAlert method.
	SaveDeviceAlertFunc func(ctx context.Context, deviceID string, alert Alert) error

	// SaveDeviceMetricFunc mocks the SaveDeviceMetric method.
	SaveDeviceMetricFunc func(ctx context.Context, deviceID string, metric Metric) error

	// UpsertDeviceConfigFunc mocks the UpsertDeviceConfig method.
	UpsertDeviceConfigFunc func(ctx context.Context, deviceID string, config Config) error

	// calls tracks calls to the methods.
	calls struct {
		// GetDeviceAlerts holds details about calls to the GetDeviceAlerts method.
		GetDeviceAlerts []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Timeframe is the timeframe argument value.
			Timeframe Timeframe
			// PageOpts is the pageOpts argument value.
			PageOpts RepositoryPageOptions
		}
		// GetDeviceConfig holds details about calls to the GetDeviceConfig method.
		GetDeviceConfig []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
		}
		// GetDeviceMetrics holds details about calls to the GetDeviceMetrics method.
		GetDeviceMetrics []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Timeframe is the timeframe argument value.
			Timeframe Timeframe
			// PageOpts is the pageOpts argument value.
			PageOpts RepositoryPageOptions
		}
		// SaveDeviceAlert holds details about calls to the SaveDeviceAlert method.
		SaveDeviceAlert []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Alert is the alert argument value.
			Alert Alert
		}
		// SaveDeviceMetric holds details about calls to the SaveDeviceMetric method.
		SaveDeviceMetric []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Metric is the metric argument value.
			Metric Metric
		}
		// UpsertDeviceConfig holds details about calls to the UpsertDeviceConfig method.
		UpsertDeviceConfig []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DeviceID is the deviceID argument value.
			DeviceID string
			// Config is the config argument value.
			Config Config
		}
	}
	lockGetDeviceAlerts    sync.RWMutex
	lockGetDeviceConfig    sync.RWMutex
	lockGetDeviceMetrics   sync.RWMutex
	lockSaveDeviceAlert    sync.RWMutex
	lockSaveDeviceMetric   sync.RWMutex
	lockUpsertDeviceConfig sync.RWMutex
}

// GetDeviceAlerts calls GetDeviceAlertsFunc.
func (mock *RepositoryMock) GetDeviceAlerts(ctx context.Context, deviceID string, timeframe Timeframe, pageOpts RepositoryPageOptions) (RepositoryPage[Alert], error) {
	if mock.GetDeviceAlertsFunc == nil {
		panic("RepositoryMock.GetDeviceAlertsFunc: method is nil but Repository.GetDeviceAlerts was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		DeviceID  string
		Timeframe Timeframe
		PageOpts  RepositoryPageOptions
	}{
		Ctx:       ctx,
		DeviceID:  deviceID,
		Timeframe: timeframe,
		PageOpts:  pageOpts,
	}
	mock.lockGetDeviceAlerts.Lock()
	mock.calls.GetDeviceAlerts = append(mock.calls.GetDeviceAlerts, callInfo)
	mock.lockGetDeviceAlerts.Unlock()
	return mock.GetDeviceAlertsFunc(ctx, deviceID, timeframe, pageOpts)
}

// GetDeviceAlertsCalls gets all the calls that were made to GetDeviceAlerts.
// Check the length with:
//
//	len(mockedRepository.GetDeviceAlertsCalls())
func (mock *RepositoryMock) GetDeviceAlertsCalls() []struct {
	Ctx       context.Context
	DeviceID  string
	Timeframe Timeframe
	PageOpts  RepositoryPageOptions
} {
	var calls []struct {
		Ctx       context.Context
		DeviceID  string
		Timeframe Timeframe
		PageOpts  RepositoryPageOptions
	}
	mock.lockGetDeviceAlerts.RLock()
	calls = mock.calls.GetDeviceAlerts
	mock.lockGetDeviceAlerts.RUnlock()
	return calls
}

// GetDeviceConfig calls GetDeviceConfigFunc.
func (mock *RepositoryMock) GetDeviceConfig(ctx context.Context, deviceID string) (Config, error) {
	if mock.GetDeviceConfigFunc == nil {
		panic("RepositoryMock.GetDeviceConfigFunc: method is nil but Repository.GetDeviceConfig was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
	}
	mock.lockGetDeviceConfig.Lock()
	mock.calls.GetDeviceConfig = append(mock.calls.GetDeviceConfig, callInfo)
	mock.lockGetDeviceConfig.Unlock()
	return mock.GetDeviceConfigFunc(ctx, deviceID)
}

// GetDeviceConfigCalls gets all the calls that were made to GetDeviceConfig.
// Check the length with:
//
//	len(mockedRepository.GetDeviceConfigCalls())
func (mock *RepositoryMock) GetDeviceConfigCalls() []struct {
	Ctx      context.Context
	DeviceID string
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
	}
	mock.lockGetDeviceConfig.RLock()
	calls = mock.calls.GetDeviceConfig
	mock.lockGetDeviceConfig.RUnlock()
	return calls
}

// GetDeviceMetrics calls GetDeviceMetricsFunc.
func (mock *RepositoryMock) GetDeviceMetrics(ctx context.Context, deviceID string, timeframe Timeframe, pageOpts RepositoryPageOptions) (RepositoryPage[Metric], error) {
	if mock.GetDeviceMetricsFunc == nil {
		panic("RepositoryMock.GetDeviceMetricsFunc: method is nil but Repository.GetDeviceMetrics was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		DeviceID  string
		Timeframe Timeframe
		PageOpts  RepositoryPageOptions
	}{
		Ctx:       ctx,
		DeviceID:  deviceID,
		Timeframe: timeframe,
		PageOpts:  pageOpts,
	}
	mock.lockGetDeviceMetrics.Lock()
	mock.calls.GetDeviceMetrics = append(mock.calls.GetDeviceMetrics, callInfo)
	mock.lockGetDeviceMetrics.Unlock()
	return mock.GetDeviceMetricsFunc(ctx, deviceID, timeframe, pageOpts)
}

// GetDeviceMetricsCalls gets all the calls that were made to GetDeviceMetrics.
// Check the length with:
//
//	len(mockedRepository.GetDeviceMetricsCalls())
func (mock *RepositoryMock) GetDeviceMetricsCalls() []struct {
	Ctx       context.Context
	DeviceID  string
	Timeframe Timeframe
	PageOpts  RepositoryPageOptions
} {
	var calls []struct {
		Ctx       context.Context
		DeviceID  string
		Timeframe Timeframe
		PageOpts  RepositoryPageOptions
	}
	mock.lockGetDeviceMetrics.RLock()
	calls = mock.calls.GetDeviceMetrics
	mock.lockGetDeviceMetrics.RUnlock()
	return calls
}

// SaveDeviceAlert calls SaveDeviceAlertFunc.
func (mock *RepositoryMock) SaveDeviceAlert(ctx context.Context, deviceID string, alert Alert) error {
	if mock.SaveDeviceAlertFunc == nil {
		panic("RepositoryMock.SaveDeviceAlertFunc: method is nil but Repository.SaveDeviceAlert was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
		Alert    Alert
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
		Alert:    alert,
	}
	mock.lockSaveDeviceAlert.Lock()
	mock.calls.SaveDeviceAlert = append(mock.calls.SaveDeviceAlert, callInfo)
	mock.lockSaveDeviceAlert.Unlock()
	return mock.SaveDeviceAlertFunc(ctx, deviceID, alert)
}

// SaveDeviceAlertCalls gets all the calls that were made to SaveDeviceAlert.
// Check the length with:
//
//	len(mockedRepository.SaveDeviceAlertCalls())
func (mock *RepositoryMock) SaveDeviceAlertCalls() []struct {
	Ctx      context.Context
	DeviceID string
	Alert    Alert
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
		Alert    Alert
	}
	mock.lockSaveDeviceAlert.RLock()
	calls = mock.calls.SaveDeviceAlert
	mock.lockSaveDeviceAlert.RUnlock()
	return calls
}

// SaveDeviceMetric calls SaveDeviceMetricFunc.
func (mock *RepositoryMock) SaveDeviceMetric(ctx context.Context, deviceID string, metric Metric) error {
	if mock.SaveDeviceMetricFunc == nil {
		panic("RepositoryMock.SaveDeviceMetricFunc: method is nil but Repository.SaveDeviceMetric was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
		Metric   Metric
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
		Metric:   metric,
	}
	mock.lockSaveDeviceMetric.Lock()
	mock.calls.SaveDeviceMetric = append(mock.calls.SaveDeviceMetric, callInfo)
	mock.lockSaveDeviceMetric.Unlock()
	return mock.SaveDeviceMetricFunc(ctx, deviceID, metric)
}

// SaveDeviceMetricCalls gets all the calls that were made to SaveDeviceMetric.
// Check the length with:
//
//	len(mockedRepository.SaveDeviceMetricCalls())
func (mock *RepositoryMock) SaveDeviceMetricCalls() []struct {
	Ctx      context.Context
	DeviceID string
	Metric   Metric
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
		Metric   Metric
	}
	mock.lockSaveDeviceMetric.RLock()
	calls = mock.calls.SaveDeviceMetric
	mock.lockSaveDeviceMetric.RUnlock()
	return calls
}

// UpsertDeviceConfig calls UpsertDeviceConfigFunc.
func (mock *RepositoryMock) UpsertDeviceConfig(ctx context.Context, deviceID string, config Config) error {
	if mock.UpsertDeviceConfigFunc == nil {
		panic("RepositoryMock.UpsertDeviceConfigFunc: method is nil but Repository.UpsertDeviceConfig was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		DeviceID string
		Config   Config
	}{
		Ctx:      ctx,
		DeviceID: deviceID,
		Config:   config,
	}
	mock.lockUpsertDeviceConfig.Lock()
	mock.calls.UpsertDeviceConfig = append(mock.calls.UpsertDeviceConfig, callInfo)
	mock.lockUpsertDeviceConfig.Unlock()
	return mock.UpsertDeviceConfigFunc(ctx, deviceID, config)
}

// UpsertDeviceConfigCalls gets all the calls that were made to UpsertDeviceConfig.
// Check the length with:
//
//	len(mockedRepository.UpsertDeviceConfigCalls())
func (mock *RepositoryMock) UpsertDeviceConfigCalls() []struct {
	Ctx      context.Context
	DeviceID string
	Config   Config
} {
	var calls []struct {
		Ctx      context.Context
		DeviceID string
		Config   Config
	}
	mock.lockUpsertDeviceConfig.RLock()
	calls = mock.calls.UpsertDeviceConfig
	mock.lockUpsertDeviceConfig.RUnlock()
	return calls
}
